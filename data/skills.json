[
  {
    "section": "Programming",
    "groups": [
      {
        "group": "Requirements",
        "subgroups": [
          {
            "level": 1,
            "description": "Deliver solutions that fulfill specified requirements",
            "skillsets": [
              "Read requirements",
              "Show that final solution meets requirements through live demo or written description"
            ],
            "resources": false,
            "goals": [
              174,
              176,
              181,
              182,
              37,
              202,
              133
            ]
          },
          {
            "level": 2,
            "description": "Clarify requirements by identifying missing and/or ambiguous areas",
            "skillsets": [
              "Identify missing and/or ambiguous areas in requirements",
              "Ask questions to gather requirements for missig areas"
            ],
            "resources": false,
            "goals": [
              133
            ]
          },
          {
            "level": 3,
            "description": "Break down large project into individual stages with requirements",
            "skillsets": [
              "Synthesize project goals and high-level requirements",
              "Split up project into separate stages with distinct, separable goals",
              "Ask questions to gather requirements",
              "Define requirements"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Testing",
        "subgroups": [
          {
            "level": 1,
            "description": "Test functions",
            "skillsets": [
              "Write tests checking number of function arguments",
              "Write tests checking type of function argument(s)",
              "Write tests checking function return values",
              "Write tests checking exception handling within functions"
            ],
            "resources": false,
            "goals": [
              123,
              128,
              156,
              157,
              158,
              159,
              174,
              176,
              283
            ]
          },
          {
            "level": 2,
            "description": "Test objects and classes",
            "skillsets": [
              "Implement tool for measuring test coverage",
              "Achieve 100% test coverage",
              "Program using test-driven development (TDD)",
              "Publish a blog post explaining the costs and benefits of TDD",
              "Use mocks and stubs to isolate class testing"
            ],
            "resources": false,
            "goals": [
              181,
              182,
              283
            ]
          },
          {
            "level": 3,
            "description": "Application-wide testing",
            "skillsets": [
              "Write end-to-end tests (AKA integration tests)",
              "Explain differences between unit tests and end-to-end tests",
              "Explain behavior-driven development (BDD)"
            ],
            "resources": false,
            "goals": [
              283
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Technical Design",
        "subgroups": [
          {
            "level": 2,
            "description": "Design solutions composed of multiple classes",
            "skillsets": [
              "Explain what a design pattern is",
              "Explain Singleton, Factory, Strategy, Template, and Observer design patterns"
            ],
            "resources": false,
            "goals": [
              37,
              202,
              133
            ]
          },
          {
            "level": 3,
            "description": "Design solutions using multiple technologies",
            "skillsets": [
              "Explain tradeoffs between server-rendered views and pure JavaScript UIs",
              "Explain tradeoffs between deploying UI and server together versus separately",
              "Explain tradeoffs between Angular and React"
            ],
            "resources": false,
            "goals": [
              181,
              182
            ]
          },
          {
            "level": 3,
            "description": "Design solutions composed of multiple independent applications integrated via APIs",
            "skillsets": [
              "Explain what a microservice is",
              "Write a blog post about the benefits/costs of microservices",
              "Explain various approaches for determining microservice boundaries",
              "Architect the split-up of a monolithic application"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Design scalable, resiliant application architectures with monitoring, redundancy, failover.",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Object Oriented Programming",
        "subgroups": [
          {
            "level": 1,
            "description": "Create basic classes",
            "skillsets": [
              "Write reader and writer methods",
              "Explain private vs public properties"
            ],
            "resources": false,
            "goals": [
              165,
              252
            ]
          },
          {
            "level": 2,
            "description": "Write programs using multiple classes",
            "skillsets": [
              "Explain single responsibility principle",
              "Explain SOLID",
              "Write a blog post explaining the difference between inheritance and composition, and example use cases for both"
            ],
            "resources": false,
            "goals": [
              165,
              191,
              252
            ]
          },
          {
            "level": 3,
            "description": "Use design patterns",
            "skillsets": [
              "Explain what a design pattern is",
              "Explain Singleton, Factory, Strategy, Template, and Observer design patterns",
              "Explain what a hook method is"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Functional Programming",
        "subgroups": [
          {
            "level": 1,
            "description": "Immutability, .map and .reduce",
            "skillsets": [],
            "resources": false,
            "goals": [
              124,
              128,
              110
            ]
          },
          {
            "level": 2,
            "description": "Composition with higher-order function decorators, currying",
            "skillsets": [],
            "resources": false,
            "goals": [
              110
            ]
          },
          {
            "level": 4,
            "description": "Generators/co-routines, memoization, lazy evaluation",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Understands deeply tradeoff/philosophy of functional programming",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Data Structures",
        "resources": false,
        "subgroups": [
          {
            "level": 1,
            "description": "Basic ADTs (array vs hash vs stack vs queue), ",
            "skillsets": [
              "Able to whiteboard an illustration of basic data structures and how they work"
            ],
            "resources": false,
            "goals": [
              156
            ]
          },
          {
            "level": 3,
            "description": "More nuanced ADTs (directed vs nondirected graphs, trees, etc.). Able to explain and use Arrays, Stacks, Queus, Dictionaries etc in practical programming tasks",
            "skillsets": [],
            "resources": false,
            "goals": [
              128,
              157
            ]
          },
          {
            "level": 4,
            "description": "Knows space and time tradeoffs of the basic data structures, Arrays vs LinkedLists, Able to explain how hashtables can be implemented and can handle collisions, Priority queues and ways to implement them etc.",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 6,
            "description": "Basic mathematical proofs of data structure performance. Knowledge of advanced data structures like B-trees, binomial and fibonacci heaps, AVL/Red Black trees, Splay Trees, Skip Lists, tries etc.",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Algorithms",
        "subgroups": [
          {
            "level": 2,
            "description": "Implement common sort and search algorithms",
            "skillsets": [
              "Implement BFS and DFS",
              "Implement merge sort, quick sort, and bubble sort"
            ],
            "resources": false,
            "goals": [
              123,
              144,
              159
            ]
          },
          {
            "level": 3,
            "description": "Understand Big O notation",
            "skillsets": [
              "Explain what Big O notation is",
              "Explain Big O values of merge sort, quick sort, and bubble sort"
            ],
            "resources": false,
            "goals": [
              123,
              158,
              159
            ]
          },
          {
            "level": 4,
            "description": "Advanced algorithms",
            "skillsets": [
              "Implement pathfinding algorithms",
              "Implement divide and conquer algorithms"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Mathematically prove algorithms",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Regular Expressions",
        "subgroups": [
          {
            "level": 3,
            "description": "Build basic regular expressions",
            "skillsets": [
              "Identify, explain, and apply special characters in a regular expression",
              "Identify, explain, and apply non-printable characters in a regular expression",
              "Identify, explain, and apply dot in a regular expression",
              "Identify, explain, and apply alternation in a regular expression",
              "Identify, explain, and apply character classes in a regular expression"
            ],
            "resources": false,
            "goals": [
              144
            ]
          },
          {
            "level": 4,
            "description": "Build intermediate regular expressions",
            "skillsets": [
              "Identify, explain, and apply shorthand character classes in a regular expression",
              "Identify, explain, and apply anchors in a regular expression",
              "Identify, explain, and apply word boundaries in a regular expression",
              "Identify, explain, and apply optional items in a regular expression",
              "Identify, explain, and apply repetition in a regular expression"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Build advanced regular expressions",
            "skillsets": [
              "Identify, explain, and apply grouping & capturing in a regular expression",
              "Identify, explain, and apply named groups in a regular expression",
              "Identify, explain, and apply backreferences in a regular expression",
              "Identify, explain, and apply mode modifiers in a regular expression",
              "Differentiate between regular expressions and a formal programming language"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 6,
            "description": "Ninja-level Regular Expressions",
            "skillsets": [
              "Identify, explain, and apply possessive quantifiers in a regular expression",
              "Identify, explain, and apply free-spacing & comments in a regular expression",
              "Identify, explain, and apply atomic grouping in a regular expression",
              "Identify, explain, and apply lookahead & lookbehind in a regular expression",
              "Identify, explain, and apply conditionals in a regular expression",
              "Cite differences in regular expression syntax between two or more languages"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Unix, shell, and terminal",
        "subgroups": [
          {
            "level": 1,
            "description": "Work with Unix processes and shell commands",
            "skillsets": [
              "Explain what the `.bashrc` and `.bash_profile` files do",
              "Explain what a path is",
              "Explain the difference between an absolute and relative path",
              "Explain the difference between an `/`, `./` , `../`",
              "Explain what these key commands do `control-c`, `control-d`, `control-z`, `control-a`, `control-e`",
              "Explain what the $PATH environment variable is for",
              "Add and remove paths from local $PATH",
              "Install a package via homebrew",
              "Explain what a UNIX `process` is",
              "Search for a running process and kill it",
              "Explain what `environment variables` are",
              "Print the value of an environment variable",
              "Set a new environment variable for all new shells",
              "Explain and use the following shell commands 'ls, cd, cat, pwd, less, touch, echo, mkdir, rm, ps, kill'",
              "Create a bash alias",
              "Customize and colorize terminal",
              "Explain the file permission printed by 'ls -la'",
              "Change the permissions of a file",
              "Display git related metadata in terminal when inside a git directory",
              "Split screen in terminal"
            ],
            "resources": false,
            "goals": [
              196,
              195
            ]
          },
          {
            "level": 2,
            "description": "Create bash scripts",
            "skillsets": [
              "Create a basic bash script",
              "Use and explain redirects",
              "Explain process exit status",
              "Start and stop processes via `brew services`",
              "Read environment variables",
              "Read process arguments",
              "Spawn child processes",
              "Prompt for user input",
              "Read from STDIN",
              "Exit with desired exit status code"
            ],
            "resources": false,
            "goals": [
              196
            ]
          },
          {
            "level": 5,
            "description": "Use Vim",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Systems Programming",
        "subgroups": [
       {
            "level": 4,
            "description": "Understand compilers and interpreters",
            "skillsets": [
              "Explain what assembly is",
              "Explain block of assembly code",
              "Explain what virtual memory is"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Understand operating systems and networking programming",
            "skillsets": [
              "Explain kernel mode vs. user mode",
              "Understand socket-level programming",
              "Write multi-threaded code",
              "Understand processes and memory (heap and stack)"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Code Quality",
        "subgroups": [
          {
            "level": 1,
            "description": "Create organized, readable code",
            "skillsets": [
              "Write well-formatted code with proper spacing and indentation.",
              "Create descriptive, well-named functions, variables, CSS classes, and filenames that follow a consistent pattern",
              "Use comments in code to explain unusual code, bugs fixes, and opportunities for refactoring",
              "Create directory names and organization that provide insights into the design of the system",
              "Separate files into logical folders",
              "Create concise and descriptive commit messages",
              "Explain SOLID principals"
            ],
            "resources": false,
            "goals": [
              181,
              182,
              191,
              69,
              83,
              93,
              98,
              110,
              127,
              165,
              174,
              176,
              37,
              127,
              133,
              202
            ]
          },
          {
            "level": 2,
            "description": "Use linters",
            "skillsets": [
              "Setup and use ESlint"
            ],
            "resources": false,
            "goals": [
              191
            ]
          },
          {
            "level": 3,
            "description": "Work on a large codebase with multiple developers",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Work on a large codebase over a long period",
            "skillsets": [
              "Observe common areas of development inertia in large codebases"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      }
    ]
  },
  {
    "section": "JavaScript",
    "groups": [
      {
        "group": "JavaScript Programming",
        "subgroups": [
          {
            "level": 1,
            "description": "Basics",
            "skillsets": [
              "Explain and use variables",
              "Perform string and array manipulation",
              "Explain 'truthy' and 'falsey' and provide examples",
              "Explain the difference between == and ===",
              "Explain literal notation",
              "Use and explain dot and bracket accessors",
              "Explain what JSON is",
              "Explain operator precedence and provide examples",
              "Use 'if', 'switch', 'while', 'for'",
              "Functions: arguments, arity, return, scope",
              "Explain and provide example of a static function",
              "Implement exception handling using try/throw/catch",
              "Use Date and Time object",
              "Use Math object",
              "Use recursion",
              "Use typeof method"
            ],
            "resources": true,
            "goals": [
              174,
              176,
              37,
              202,
              251
            ]
          },
          {
            "level": 2,
            "description": "Object-oriented patterns",
            "skillsets": [
              "How to create and use a function constructor",
              "Explain variable scoping, including lexical scopes and dynamics scopes",
              "Explain what a closure is and why they are used",
              "Explain prototypes",
              "Implement prototypical inheritance",
              "Explain the difference between Classic Inheritance and Prototypical Inheritance",
              "Explain how 'this' gets its value and create a code example",
              "Show how to use private, public , and static variables/functions",
              "Show how to extend built-in objects"
            ],
            "resources": true,
            "goals": [
              165,
              252
            ]
          },
          {
            "level": 2,
            "description": "Asynchronous flow",
            "skillsets": [
              "Explain what a callback is write an example",
              "Explain what a Promise is and write an example",
              "Write a function that converts a callback API into a Promise API",
              "Use promises to defined both parallel and serial execution orders",
              "Throw and catch errors in a promise chain"
            ],
            "resources": true,
            "goals": [
              150,
              186
            ]
          },
          {
            "level": 5,
            "description": "Inner-workings",
            "skillsets": [
              "Explain how the JavaScript event loop works",
              "Explain V8 JIT compilation"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "JavaScript Debugging",
        "subgroups": [
          {
            "level": 1,
            "description": "Basic debugging",
            "skillsets": [
              "Read backtraces",
              "Log relevant events and values",
              "Throw intentional errors for edge cases"
            ],
            "resources": false,
            "goals": [
              256
            ]
          },
          {
            "level": 2,
            "description": "Breakpoints",
            "skillsets": [
              "Log backtraces with `console.trace`",
              "Use debugger to set break points",
              "Use debugger to step up and down the call stack",
              "Use debugger to evaling code at a specific points"
            ],
            "resources": false,
            "goals": [
              256
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "ES6",
        "subgroups": [
          {
            "level": 3,
            "description": "Use ES6 syntax",
            "skillsets": [
              "Explain how arrow functions are different from function(){} functions",
              "Explain how `class` transpiles to an ES5 Constructor",
              "Explain the difference between const and let",
              "Define a class with both class and instance properties",
              "Import and export a single default export",
              "Import and export a set of named exports",
              "Use and explain async/await"
            ],
            "resources": true,
            "goals": []
          },
          {
            "level": 3,
            "description": "Transpile ES6 for production use",
            "skillsets": [
              "Explain browser ES6 compatability",
              "Setup babel to transpile ES6",
              "Setup babel using a .babelrc",
              "Name popular .babelrc configs and when to use babel-register babel-node and babel-polyfill"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 6,
            "description": "Contribute to babel or a babel plugin",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "JavaScript Performance",
        "subgroups": [
          {
            "level": 5,
            "description": "Understand garbage collection",
            "skillsets": [
              "Explain how garbage collection works in JavaScript",
              "Inspect heap to isolate memory leaks",
              "Explain how to optimize memory use"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Understand CPU performance",
            "skillsets": [
              "Profile CPU to find CPU-intensive functions",
              "Understand what makes code CPU-intensive"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      }
    ]
  },
  {
    "section": "Frontend",
    "groups": [
      {
        "group": "HTML and CSS",
        "subgroups": [
          {
            "level": 1,
            "description": "Write basic HTML/CSS",
            "skillsets": [
              "Explain the DOM tree structure",
              "Adjust font weights, families, and sizes",
              "Explain what `ems` are and how they're different than pixels",
              "Use relative and absolute paths to images in CSS",
              "Explain differences between inline, block, and inline-block display",
              "Use relative and absolute positioning in CSS",
              "Use the HTML tags: `html, head, body, script, link, title, div, span, a, button, p, ul, li, table, tbody, tr, th, td`",
              "Include stylesheets, javascripts and images in HTML",
              "Explain the box model",
              "Explain when to use an id vs. a class name",
              "Explain what these CSS selectors do: `.signup-form`, `.signup-form .first-name-field`, `table.stripped-table`, `a.button:hover`, `.IconButton > button`, `table > tr:nth-child(odd)`",
              "Explain these pseudo-selectors `:hover,:focus,:active,:visited,:disabled,:checked,:nth-child`",
              "Explan these CSS properties: `border, margin, padding, height, width, background, display, color, font-size, font-weight, flex-direction, flex-wrap, align-items, align-content, flex-grow`",
              "Inspect and edit an element in the DOM tree using Chrome Developer Tools",
              "Implement a two column layout with a fixed-width sidebar and flexible width main area",
              "Explain what a 'reset stylesheet' is and why they are used",
              "Show how to write CSS inline in an HTML document",
              "Create a link to a specific position on the page using an anchor tag",
              "Explain what a CSS sprite is"
            ],
            "resources": false,
            "goals": [
              93,
              251,
              253
            ]
          },
          {
            "level": 2,
            "description": "Use media queries",
            "skillsets": [
              "Explain what a media-query is and how they are used",
              "Create a layout that is two columns on when viewed in a desktop browser full-screen, and one column when viewed from a phone"
            ],
            "resources": false,
            "goals": [
              150,
              120,
              83,
              93
            ]
          },
          {
            "level": 3,
            "description": "Use CSS frameworks",
            "skillsets": [
              "Build pages using Twitter Bootstrap, Foundation, and a Material Design framework"
            ],
            "resources": false,
            "goals": [
              150,
              120,
              83,
              93
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "JavaScript in the Browser",
        "subgroups": [
          {
            "level": 1,
            "description": "Work with DOM operations and events",
            "skillsets": [
              "Select, insert, and modify DOM nodes",
              "Add data attributes to elements and use as selector in JavaScript",
              "Prevent default browser behavior (eg. prevent a form from being submitted when button is clicked)",
              "Bind and respond to browser events such as form submit, button click, and scroll",
              "Explain what event delegation is and when it is useful",
              "Explain coding patterns to avoid defining globals"
            ],
            "resources": true,
            "goals": [
              120,
              181,
              182,
              235,
              236,
              251,
              253
            ]
          },
          {
            "level": 2,
            "description": "Implement XHR requests (AJAX)",
            "skillsets": [
              "Explain what XHR is",
              "Make a XHR request without any libraries",
              "Make a XHR request using jQuery",
              "Examine XHR request using the Chrome Developer Tools",
              "Understanding fetch method and browser support",
              "Explain CORS and common workarounds"
            ],
            "resources": true,
            "goals": [
              150,
              83
            ]
          },
          {
            "level": 3,
            "description": "Use browser storage",
            "skillsets": [
              "Explain what a cookie is",
              "Read and write cookie values",
              "Explain what localStorage is",
              "Read and write to localStorage",
              "Explain the difference between localStorage and sessionStorage"
            ],
            "resources": true,
            "goals": [
              253
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "React",
        "subgroups": [
          {
            "level": 3,
            "description": "Build React apps",
            "skillsets": [
              "Explain JSX",
              "Explain and demonstrate various lifecycle hook methods",
              "Explain and demonstrate difference between state and props",
              "Pass handlers/functions between components",
              "Implement react-router",
              "Build a todo app with React from scratch",
              "Deploy app online"
            ],
            "resources": false,
            "goals": [
              120,
              226,
              231,
              232,
              237,
              236,
              235
            ]
          },
          {
            "level": 3,
            "description": "Manage state using various methods",
            "skillsets": [
              "Explain and implement stateful and stateless components",
              "Explain and whiteboard Flux architecture",
              "Use Redux",
              "Use Mobx"
            ],
            "resources": false,
            "goals": [
              226,
              231,
              232,
              237,
              236,
              235
            ]
          },
          {
            "level": 4,
            "description": "Perform advanced React tasks",
            "skillsets": [
              "Understands and uses Relay/GraphQL",
              "Implements tests for React app",
              "Implements server-rendering and understands benefits"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "UI/UX Design",
        "subgroups": [
          {
            "level": 1,
            "description": "Wireframe UIs",
            "skillsets": [
              "Create wireframes with Balsamiq for a simple app you want to build"
            ],
            "resources": false,
            "goals": [
              302
            ]
          },
          {
            "level": 2,
            "description": "Edit images",
            "skillsets": [
              "Resize, crop, and optimize images in Photoshop/Sketch",
              "Mock up a simple page with Photoshop/Sketch",
              "Explain common typographic terms (serif, sans-serif, kerning)",
              "Use Google Fonts and Typekit"
            ],
            "resources": false,
            "goals": [
              302
            ]
          },
          {
            "level": 5,
            "description": "Perform advanced UX tasks",
            "skillsets": [
              "Create a mood board for a project",
              "Create style tiles for a project",
              "Explain accessibility in design",
              "Describe and apply a mobile-first design approach",
              "Design a web page with functional UI at 4+ screen widths"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Webpack",
        "subgroups": [
          {
            "level": 3,
            "description": "Write a basic config file",
            "skillsets": [
              "Install Webpack",
              "Setup devserver with hot loading",
              "Explain and implement plugins including `html-webpack-plugin`, `webpack-dashboard`, and `extract-text-webpack-plugin`"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 4,
            "description": "Setup universal app",
            "skillsets": [
              "Setup webpack configurations that support both client and server-rendering"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "React Native",
        "subgroups": [
          {
            "level": 5,
            "description": "Create an app",
            "skillsets": [
              "Build a simple app (eg. todo)",
              "Explain native UI components",
              "Publish app on App Store",
              "Test app in Android emulator"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Template",
        "subgroups": [
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ]
      }
    ]
  },
  {
    "section": "Backend",
    "groups": [
      {
        "group": "NodeJS",
        "subgroups": [
          {
            "level": 1,
            "description": "Use Node.js packages and modules",
            "skillsets": [
              "Explain package.json purpose, structure, and common properties",
              "Install packages as dependencies and development dependencies",
              "Read and write to files using built-in fs API",
              "Export objects via module.exports",
              "Import objects using require()",
              "Setup `npm start` and `npm test` sripts",
              "Use environment variables"
            ],
            "resources": false,
            "goals": [
              133,
              226,
              231,
              232,
              237,
              236,
              235,
              252,
              253,
              255
            ]
          },
          {
            "level": 4,
            "description": "Publish NPM packages",
            "skillsets": [
              "Create and publish a package via NPM",
              "Create a package with at least one executable",
              "Define which file is the 'main' file",
              "Setup continuous integration"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Server Applications",
        "subgroups": [
          {
            "level": 1,
            "description": "Build server applications",
            "skillsets": [
              "Explain the request & response lifecycle",
              "Explain the difference between a standard HTTP request and an AJAX/XHR request",
              "Draw a diagram showing how data/messages flow from the browser, to the server and back again with detail about the contents sent within those messages",
              "Explain the difference between a `get` and a `post` request",
              "Explain what a port is",
              "Explain how a web browser talks to a web server",
              "Explain how to implement authentication using cookies",
              "Explain a common file structure for a web app",
              "Use redirects",
              "Use environment variables",
              "Create an app that serves multiple static view files",
              "Create an app that renders views with dynamic data",
              "Explain the difference between 'front end' and 'back end'"
            ],
            "resources": false,
            "goals": [
              150,
              64,
              69,
              98,
              194,
              253,
              255
            ]
          },
          {
            "level": 2,
            "description": "Implement common web app features",
            "skillsets": [
              "Implement logging in a web app",
              "Implement server-side routing in a web app",
              "Render `HTML` from a `pug` template in response to a request",
              "Render `JSON` in response to a request",
              "Create a web app with client-side rendering",
              "Implement pagination",
              "Explain two API pagination impementations",
              "Implement authorization in a web app",
              "Implement authentication in a web app",
              "Explain the difference between authorization vs. authentication",
              "Explain and use websockets",
              "Use OAuth to authenticate with a third-party service",
              "Implement file upload",
              "Implement graceful error handling (display 500 page on server error)",
              "Use HTTPS"
            ],
            "resources": false,
            "goals": [
              181,
              182,
              255
            ]
          },
          {
            "level": 3,
            "description": "Understand MVC",
            "skillsets": [
              "Explain the Model-View-Controller pattern in a web app"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Databases",
        "subgroups": [
          {
            "level": 1,
            "description": "Use relational databases",
            "skillsets": [
              "Install Postgres via Homebrew",
              "Start and stop postgres via `brew services`",
              "Create and delete Postgres databases",
              "Use `psql` to connect to specific database",
              "`describe` a database and table in the `psql` console",
              "Create a table with multiple columns of different types",
              "Design a schema with two tables that have a 1-1 relationship",
              "Design a schema with two tables that have a 1-N relationship",
              "Design a schema with two tables that have an N-N relationship",
              "Write select queries that use the following features: `*, FROM, WHERE, ORDER`",
              "Write a 1-1 relationship query`",
              "Write a 1-N relationship query`",
              "Write a N-N relationship query`",
              "Explain `normalization` and `denormalization`",
              "Design a schema for a given data set and list of questions that need answering",
              "Understand ACID principles at a high level, and explain why they are useful"
            ],
            "resources": false,
            "goals": [
              64,
              69,
              96,
              98,
              181,
              182,
              178,
              226,
              254,
              255,
              192
            ]
          },
          {
            "level": 2,
            "description": "Use indexes, transactions, and complex queries",
            "skillsets": [
              "Design and use a join table without an auto-incrementing ID column",
              "Define an index as a unique constraint on a column",
              "Explain how indexes work and costs/benefits",
              "Write a query that joins more than 2 tables",
              "Explain the difference between INNER, FULL OUTER, LEFT OUTER, & RIGHT OUTER joins",
              "Explain the difference between a normalized and denormalized schema",
              "Use transactions to ensure your changes are gauranteed all-or-nothing"
            ],
            "resources": false,
            "goals": [
              126,
              127,
              181,
              182,
              186,
              235,
              231
            ]
          },
          {
            "level": 3,
            "description": "Use ORMs and NoSQL databases",
            "skillsets": [
              "Create and run database migrations",
              "Install and read/write data using MongoDB",
              "Install and read/write data using Redis",
              "Convert a SQL schema into a document store",
              "Explain the differences between a relational database, a document store database, and a key-value database"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Understand advanced database features and inner-workings",
            "skillsets": [
              "Use SQL views",
              "Explain stored procedures",
              "Explain difference between clustered and non-clustered indexes",
              "Experience with large in-production databases",
              "Use Hot standby and perform database backup/restoration",
              "Able to replace cursor usage with relational sql",
              "Explain how data is stored internally",
              "Explain how sharding works",
              "Explain how databases can be mirrored and replicated",
              "Explain how two-phase commit works"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "APIs",
        "subgroups": [
          {
            "level": 1,
            "description": "Write code that consumes an API",
            "skillsets": [
              "Send basic authentication headers in an HTTP request",
              "Use OAuth to authenticate against an API like Github's",
              "Use an API to read data from a remote service",
              "Use an API to create a resource on a remote service",
              "Make API requests using cURL and Postman",
              "Familar with SOAP and REST"
            ],
            "resources": false,
            "goals": [
              194
            ]
          },
          {
            "level": 2,
            "description": "Build an API",
            "skillsets": [
              "Describe the RESTful API design",
              "Familiar with JSON response conventions like jsonapi.org",
              "Write out the methods and paths for a nested RESTFUL resource",
              "Design error HTTP status codes and responses"
            ],
            "resources": false,
            "goals": [
              127,
              194,
              255
            ]
          },
          {
            "level": 4,
            "description": "Understand microservices",
            "skillsets": [
              "Define what a microservice is",
              "Describe benefits and downsides of microservice architecture",
              "Describe when building microservices is appropriate versus not",
              "Describe how to determine microservice boundaries",
              "Visually describe example of monolith application split into microservices"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 4,
            "description": "Build advanced APIs",
            "skillsets": [
              "Build a GraphQL API",
              "Build an API delivered through Fastly"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "HTTP",
        "subgroups": [
          {
            "level": 1,
            "description": "Understand headers and methods",
            "skillsets": [
              "Explain the different parts of a URL",
              "Explain difference between a GET and POST",
              "Explain the headers `Accepts`, `Content-type`",
              "Explain status codes 201, 202, 204, 301, 302, 401, 403",
              "List differences between a standard HTTP request and a XHR request",
              "List commonly used HTTP headers"
            ],
            "resources": [],
            "goals": [
              194,
              255
            ]
          },
          {
            "level": 2,
            "description": "Understand DNS and TCP",
            "skillsets": [
              "Explain how DNS works",
              "Explain how TCP works",
              "Explain how HTTPS works"
            ],
            "resources": [],
            "goals": [
              181,
              182,
              194
            ]
          },
          {
            "level": 5,
            "description": "Understand HTTP caching",
            "skillsets": [
              "Explain how eTags, expires, and Last-Modified work"
            ],
            "resources": [],
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Deployment",
        "subgroups": [
          {
            "level": 2,
            "description": "Deploy an app to Heroku",
            "skillsets": [
              "Build code for production",
              "Deploy app to Heroku",
              "Check the logs of a Heroku app",
              "Debug a failed build on Heroku",
              "Integrate a Heroku add-on",
              "Register a domain name",
              "Setup a staging server on Heroku"
            ],
            "resources": false,
            "goals": [
              255,
              192
            ]
          },
          {
            "level": 2,
            "description": "Deploy using a CI pipeline",
            "skillsets": [
              "Setup a CI system",
              "Setup automatic deploys when all tests pass"
            ],
            "resources": false,
            "goals": [
              192
            ]
          },
          {
            "level": 4,
            "description": "Use contrainers",
            "skillsets": [
              "Provision a DigitalOcean container",
              "Configure a DigitalOcean container",
              "Start a DigitalOcean container",
              "Connect to a DigitalOcean container via SSH",
              "Install libraries on a DigitalOcean container",
              "Install a language runtime on a DigitalOcean container",
              "Deploy an app to a DigitalOcean container"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Use Docker",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Security",
        "subgroups": [
          {
            "level": 2,
            "description": "Explain common web security issues",
            "skillsets": [
              "Explain CSRF and how to protect against it",
              "Explain XSS and how to protect against it",
              "Explain SQL injection and how to protect against it",
              "Explain how HTTPS is \"secure\"?"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 6,
            "description": "Understand brute-force/DDoS attacks",
            "skillsets": [
              "Explain what a brute-force/DDoS attack is",
              "Explain how to defent against a brute-force/DDoS attack"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Template",
        "subgroups": [
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ]
      }
    ]
  },
  {
    "section": "Team Development",
    "groups": [
      {
        "group": "Git",
        "subgroups": [
          {
            "level": 1,
            "description": "Downloading, committing, and pushing to git repos and branches",
            "skillsets": [
              "clone a remote repository",
              "pull down a feature branch from a remote repository",
              "stage files using `git add --patch`",
              "create a commit",
              "ammend the most recent commit message",
              "push up to a remote repository",
              "push up to a specified branch in a remote repository",
              "initialize a new git repository",
              "create a new Github repository",
              "add and remove github repositories as remotes",
              "tell git to ignore files with `.gitignore`",
              "create a Github pull request",
              "create and delete new branches"
            ],
            "resources": false,
            "goals": [
              181,
              182,
              226,
              231,
              232,
              237,
              236,
              235,
              256
            ]
          },
          {
            "level": 2,
            "description": "Merging branches and reverting work",
            "skillsets": [
              "revert files back to a specific commit",
              "revert a specified file to a version committed previously",
              "understand difference between reset --HARD and --SOFT",
              "resolve basic merge conflicts"
            ],
            "resources": false,
            "goals": [
              83,
              256
            ]
          },
          {
            "level": 3,
            "description": "git command line (rebase, cherry-pick), has worked in an org with branching and PRs",
            "skillsets": [
              "rebase a branch (pull latest commits from remote master branch into a local feature branch)",
              "understand rebase vs merge",
              "use `git rebase --interactive` to squash, rename, and reorder commits",
              "use cherry-pick to move specific commits between different branches",
              "understand git add --patch",
              "understand git tags and common use cases on teams and in open source"
            ],
            "resources": false,
            "goals": [
              256
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Pairing",
        "subgroups": [
          {
            "level": 1,
            "description": "Pairing",
            "skillsets": [
              "Pair with someone at a higher skill level",
              "Pair with someone at your same skill level",
              "Pair with someone at a lower skill level",
              "Follow the roles of driver and navigator when pair programming",
              "Pair on the same computer with one keyboard and pointer device",
              "Pair on the same computer with two keyboards and pointer devices",
              "Pair remotely with ScreenHero",
              "TDD Pair (one person writes tests, one person makes them pass)"
            ],
            "resources": false,
            "goals": [
              256
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": true
      },
      {
        "group": "Technical Documentation",
        "subgroups": [
          {
            "level": 3,
            "description": "Able to produce useful, readable documentation.",
            "skillsets": [],
            "resources": false,
            "goals": [
              133
            ]
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Engineering Process",
        "subgroups": [
          {
            "level": 1,
            "description": "Track work using Kanban board",
            "skillsets": [
              "Understand Kanban process",
              "Create a Kanban board for a solo project",
              "Create a Kanban board for a team project which includes code review and stakeholder approval before release"
            ],
            "resources": true,
            "goals": [
              181,
              182
            ]
          },
          {
            "level": 2,
            "description": "Estimate work and measure capacity",
            "skillsets": [
              "Understand shortfalls of time-based estimation",
              "Understand point-based estimation",
              "Understand why Fibonnaci scale is useful for point-based estimation",
              "Understand T-shirt estimation as alternative to points",
              "Understand estimation processes (eg. planning poker)",
              "Understand how to estimate completion of future work using velocity"
            ],
            "resources": true,
            "goals": []
          },
          {
            "level": 3,
            "description": "Understand and implement Scrum",
            "skillsets": [
              "Understand differences between Scrum and Kanban",
              "Understand Scrum team roles",
              "Understand purpose of daily standup",
              "Understand retrospective purpose and process"
            ],
            "resources": true,
            "goals": []
          },
          {
            "level": 4,
            "description": "Execute product development methodologies",
            "skillsets": [
               "Understand and execute Lean Startup process",
               "Understand and execute Google design sprints"
            ],
            "resources": true,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Template",
        "subgroups": [
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ]
      }
    ]
  },
  {
    "section": "Misc",
    "groups": [
      {
        "group": "Keyboard Typing",
        "subgroups": [
          {
            "level": 1,
            "description": "Beginner Keyboard",
            "skillsets": [
              "Type all 26 alphabetical keys without looking at the keyboard",
              "Write plain English at > 30 WPM",
              "Write code at > 15 WPM"
            ],
            "resources": false,
            "goals": [
              256
            ]
          },
          {
            "level": 3,
            "description": "Intermediate Keyboard",
            "skillsets": [
              "Type all 10 numeric keys without looking at the keyboard",
              "Write plain English at > 45 WPM",
              "Write code at > 20 WPM",
              "Find and apply keyboard shortcuts in commonly used applications",
              "Navigate text without using the mouse",
              "Remap modifier keys for faster use"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 4,
            "description": "Advanced Typing",
            "skillsets": [
              "Write plain English at > 70 WPM",
              "Write code at > 30 WPM",
              "Navigate the OS without using the mouse"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 5,
            "description": "Wizard level keyboard skills",
            "skillsets": [
              "Write plain English at > 90 WPM",
              "Write code at > 35 WPM"
            ],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Interviewing",
        "subgroups": [
          {
            "level": 3,
            "description": "Basic Interviewing",
            "skillsets": [
              "Describe thought process in an interview",
              "Maintain composure in an interview",
              "Demonstrate confidence in an interview"
            ],
            "resources": false,
            "goals": [
              125,
              291
            ]
          },
          {
            "level": 3,
            "description": "Intermediate Interviewing",
            "skillsets": [
              "Prepare for an interview",
              "Engage the interviewer",
              "Clarify questions in an interview",
              "Solve problems in real-time in an interview",
              "Demonstrate competence in an interview",
              "Identify and explain common interview questions",
              "Identify and explain common interview stages"
            ],
            "resources": false,
            "goals": [
              125,
              291
            ]
          },
          {
            "level": 4,
            "description": "Live Interviewing 1",
            "skillsets": [
              "Demonstrate humility in an interview",
              "Demonstrate personality in an interview",
              "Identify and explain common biases in an interview process",
              "Neutralize common biases in an interview process",
              "Identify and explain common stresses for an interviewer",
              "Manage and counteract common stresses as an interviewee",
              "Communicate clearly and professionally with potential employer before interview",
              "Follow up after interview to thank interviewers and open up for next steps",
              "Dress, behave, and present oneself appropriately for an interview"
            ],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ],
        "resource": false
      },
      {
        "group": "Template",
        "subgroups": [
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ]
      }
    ]
  },
  {
    "section": "Template",
    "groups": [
      {
        "group": "Template",
        "subgroups": [
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          },
          {
            "level": 0,
            "description": "",
            "skillsets": [],
            "resources": false,
            "goals": []
          }
        ]
      }
    ]
  }
]
